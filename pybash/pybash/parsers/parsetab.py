# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "expressionASSIGNMENT TERMterm : TERMassignment : ASSIGNMENTexpression : expression term\n                      | term\n                      | assignment"

_lr_action_items = {
    "TERM": (
        [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
        ],
        [
            4,
            4,
            -4,
            -5,
            -1,
            -2,
            -3,
        ],
    ),
    "ASSIGNMENT": (
        [
            0,
        ],
        [
            5,
        ],
    ),
    "$end": (
        [
            1,
            2,
            3,
            4,
            5,
            6,
        ],
        [
            0,
            -4,
            -5,
            -1,
            -2,
            -3,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "expression": (
        [
            0,
        ],
        [
            1,
        ],
    ),
    "term": (
        [
            0,
            1,
        ],
        [
            2,
            6,
        ],
    ),
    "assignment": (
        [
            0,
        ],
        [
            3,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> expression", "S'", 1, None, None, None),
    ("term -> TERM", "term", 1, "p_term", "semantic_parser.py", 18),
    (
        "assignment -> ASSIGNMENT",
        "assignment",
        1,
        "p_assignment",
        "semantic_parser.py",
        22,
    ),
    (
        "expression -> expression term",
        "expression",
        2,
        "p_expression",
        "semantic_parser.py",
        28,
    ),
    ("expression -> term", "expression", 1, "p_expression", "semantic_parser.py", 29),
    (
        "expression -> assignment",
        "expression",
        1,
        "p_expression",
        "semantic_parser.py",
        30,
    ),
]
